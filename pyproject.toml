[project]
name = "bmt_py"
authors = [
  { name = "Saikat Karmakar", email = "saikickkarma@protonmail.com" }
]
description = "Binary Merkle Tree operations on data"
readme = "README.md"
dynamic = ["version"]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">=3.9"
dependencies = [
  "eth-utils",
  "pydantic",
  "pycryptodome"
]

# Don't know we need this or not
# [project.optional-dependencies]
# docs = [
#   "mkdocs-material",
#   "mkdocstrings-python",
#   "bmt_py @ file:///./"
# ]

# test = [
#   "pytest",
#   "pytest-cov",
#   "ruff",
#   "mypy"

# ]

[project.urls]
Documentation = "https://aviksaikat.github.io/bmt_py/"
Source = "https://github.com/aviksaikat/bmt_py"

# mypy
[tool.mypy]
exclude = ["build/", "dist/", "docs/", "tests/*"]
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "ISC001"
]


[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "PLR2004"]

[tool.pytest.ini_options]
addopts = "--cov=src/bmt_py/ --cov-report=term-missing -p no:ape_test" # ignore eth-ape plugin

# [tool.hatch]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "regex_commit"
commit_extra_args = ["-e"]
path = "src/bmt_py/__version__.py"

# Module dependencies
[tool.hatch.envs.default]
python = "3.9"
dependencies = [
    "mypy",
    "ruff",
    "eth-utils",
    "pydantic",
    "swarm-bee-py",  
]

# Documentation dependencies
[tool.hatch.envs.docs]
dependencies = [
  "mkdocs-material",
  "mkdocstrings-python",
  "bmt_py @ {root:uri}/"
]

[tool.hatch.envs.default.scripts]
test = "pytest"
test-cov-xml = "pytest --cov-report=xml"
lint = [
  "ruff format .",
  "ruff check --fix .",
  "mypy src/bmt_py/",
]
lint-check = [
  "ruff format --check .",
  "ruff check .",
  "mypy src/bmt_py/",
]
docs-serve = "mkdocs serve --clean"
docs-build = "mkdocs build"

# Testing dependencies
[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "pytest-cov",
  "swarm-bee-py",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.9", "3.10", "3.11"] # "3.12"
# python = ["3.9"]
# version = ["42", "3.14"]


[build-system]
requires = ["hatchling", "hatch-regex-commit"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/bmt_py"]
